# Load Data
activity.table <- read.csv("activity.csv", na.strings = "NA", colClasses = c("numeric", "Date", "factor"))
# Clean up and reformat interval
levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 1] <- paste("000", levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 1], sep = "")
levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 2] <- paste("00", levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 2], sep = "")
levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 3] <- paste("0", levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 3], sep = "")
levels(activity.table$interval) <- format(strptime(levels(activity.table$interval), format = "%H%M"), "%H:%M")
setwd("~/datascience/Project1/RepData_PeerAssessment1")
# Load Data
activity.table <- read.csv("activity.csv", na.strings = "NA", colClasses = c("numeric", "Date", "factor"))
# Clean up and reformat interval
levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 1] <- paste("000", levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 1], sep = "")
levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 2] <- paste("00", levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 2], sep = "")
levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 3] <- paste("0", levels(activity.table$interval)[nchar(levels(activity.table$interval)) == 3], sep = "")
levels(activity.table$interval) <- format(strptime(levels(activity.table$interval), format = "%H%M"), "%H:%M")
activity.byinterval <- group_by(activity.table, interval)
library(dplyr)
activity.byinterval <- group_by(activity.table, interval)
interval.summary <- summarise(activity.byinterval, avg.steps = mean(steps, na.rm = TRUE))
intsum.ordered <- interval.summary[order(interval.summary$interval),]
View(intsum.ordered)
intsum.ordered <- interval.summary[order(as.character(interval.summary$interval)),]
View(intsum.ordered)
with(intsum.ordered, plot(avg.steps, type = "l", axes = FALSE, col = "blue", xlab = "5 minute interval", ylab = "Average steps taken across all days"))
axis(2)
axis(1, at = seq(from = 1, to = 288, length.out = 10), labels = intsum.ordered$interval[seq(from = 1, to = 288, length.out = 10)], las = 2)
box()
library(ggplot2)
intplot <- ggplot(intsum.ordered, aes(x = interval, y = avg.steps))
intplot + geom_line(colour = "blue")
qplot(interval, avg.steps, data = intsum.ordered)
qplot(interval, avg.steps, data = intsum.ordered, type = "l")
intplot <- ggplot(intsum.ordered, aes(x = avg.steps))
intplot + geom_path()
intplot <- ggplot(intsum.ordered, aes(x = interval, y = avg.steps))
intplot + geom_path()
with(intsum.ordered, plot(avg.steps, type = "l", axes = FALSE, col = "blue", xlab = "5 minute interval", ylab = "Average steps taken across all days"))
axis(2)
axis(1, at = seq(from = 1, to = 288, length.out = 10), labels = intsum.ordered$interval[seq(from = 1, to = 288, length.out = 10)], las = 2)
box()
missing.check <- is.na(activity.table$steps)
tidy.activity <- activity.table
missing.index <- which(missing.check)
for (i in seq_along(missing.index)) {
chkinterval <- as.character(tidy.activity[missing.index[i], 3])
repsteps <- intsum.ordered$avg.steps[as.character(intsum.ordered$interval) == chkinterval]
tidy.activity[missing.index[i], 1] <- repsteps
}
dayofweek <- weekdays(tidy.activity$date, abbreviate = TRUE)
weekday <- function(x) {
if (x == "Sat" | x == "Sun") {
x <- "weekend"
} else {
x <- "weekday"
}
}
dayofweek <- sapply(dayofweek, weekday)
tidy.activity$day <- as.factor(dayofweek)
new.activity.byinterval <- group_by(tidy.activity, interval, day)
new.interval.summary <- summarise(new.activity.byinterval, avg.steps = mean(steps, na.rm = TRUE))
new.intsum.ordered <- new.interval.summary[order(as.character(new.interval.summary$interval)),]
library(lattice)
xyplot(avg.steps ~ interval | day, data = new.intsum.ordered, layout = c(1,2), type = c("l", "l"), scales = list(y = list(at = seq(from = 1, to = 288, length.out = 10), labels = new.intsum.ordered$interval[seq(from = 1, to = 288, length.out = 10)])))
xyplot(avg.steps ~ interval | day, data = new.intsum.ordered, layout = c(1,2), type = c("l", "l"), scales = list(x = list(at = seq(from = 1, to = 288, length.out = 10), labels = new.intsum.ordered$interval[seq(from = 1, to = 288, length.out = 10)])))
xyplot(avg.steps ~ interval | day, data = new.intsum.ordered, layout = c(1,2), type = c("l", "l"), scales = list(x = list(at = seq(from = 1, to = 288, length.out = 10), labels = intsum.ordered$interval[seq(from = 1, to = 288, length.out = 10)])))
xyplot(avg.steps ~ interval | day, data = new.intsum.ordered, layout = c(1,2), type = "l", scales = list(x = list(at = seq(from = 1, to = 288, length.out = 10), labels = intsum.ordered$interval[seq(from = 1, to = 288, length.out = 10)])))
